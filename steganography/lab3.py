import numpy as np
import matplotlib.pyplot as plt
from skimage import io
from skimage.io import imshow, show, imread, imsave
from skimage.metrics import peak_signal_noise_ratio     # PSNR
from scipy import fft, ifft

import cv2
from scipy.signal import convolve2d
from io import BytesIO
from PIL import Image
from lab2 import *


# –î–∞–Ω–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤—ã—Ä–µ–∑–∞–Ω–∏–∏ –∏–∑ –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# —Ä–∞–∑–º–µ—Ä–∞–º–∏ ùëÅ1 √ó ùëÅ2 –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å —Ç–µ–º–∏ –∂–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏,
# –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –≤ —Ç–æ—á–∫–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (0,0) –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –¥–æ–ª—é ùúó –æ—Ç –µ–≥–æ
# –ø–ª–æ—â–∞–¥–∏. –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
def cut(Cw, C):
    p = []
    v_min = 0.2
    v_max = 0.9
    w = Cw.shape[0]
    h = Cw.shape[1]
    s = w*h

    result = []
    j = 0
    for v in np.arange(v_min, v_max, 0.1):
        Cw_ = []
        a = int((s*v)**(1/2))
        Cw_ = np.zeros((h, w, 3))
        for i in range(0, h):
            for j in range(0, w):
                if i < a and j < a:
                    Cw_[i][j] = Cw[i][j]
                else:
                    Cw_[i][j] = C[i][j]
        p.append(calculation_p(Cw_)[:])
        result = Cw_
    return p


# –í –¥–∞–Ω–Ω–æ–º –∏—Å–∫–∞–∂–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞
# –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —É–≥–æ–ª ùúë —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,
# —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä.
def rotation(Cw):
    p = []
    (h, w) = Cw.shape[:2]
    center = (int(w / 2), int(h / 2))

    for fi in np.arange(1, 98.9, 8.9):
        rotation_matrix = cv2.getRotationMatrix2D(center, int(-fi), 1)
        Cw_ = cv2.warpAffine(Cw, rotation_matrix, (w, h))
        p.append(calculation_p(Cw_))

    return p


# –ó–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
# ùê∂ùëäÃÉ(ùëõ1,ùëõ2)=ùê∂ùëä(ùëõ1,ùëõ2)+ùê¥(ùê∂ùëä(ùëõ1,ùëõ2)‚àíùê∂ùë†ùëöùëúùëúùë°‚Ñéùëä(ùëõ1,ùëõ2)),
# –≥–¥–µ ùê∂ùë†ùëöùëúùëúùë°‚Ñéùëä ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ùê∂ùëä –≤ –æ–∫–Ω–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ ùëÄ√óùëÄ (–∏—Å–∫–∞–∂–µ-–Ω–∏–µ 5 —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞),
# –∞ ùê¥>0 ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–Ω–æ–≥–æ –∏–∑–æ–±-—Ä–∞–∂–µ–Ω–∏—è.
def sharpen(Cw):
    p = []
    a = 5
    for m in range(3, 15, 2):
        filter_kernel = np.ones((m, m))
        # filter_kernel *= 1/(m*m)
        for channel_num in range(3):
            Cw_ = np.zeros(Cw.shape)
            channel = get_channel(Cw, channel_num)
            Cw_smooth = convolve2d(channel, filter_kernel * 1/(m*m), mode='same', boundary='fill', fillvalue=0)
            channel = channel + a*(channel - Cw_smooth)

            for i in range(len(Cw)):
                for j in range(len(Cw)):
                    Cw_[i][channel_num] = channel[i][j]
            p.append(calculation_p(Cw_))

        # # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
        # fig = plt.figure(figsize=(9, 3))
        # fig.add_subplot(1, 3, 1)
        # plt.title(f'–ò—Å—Ö–æ–¥–Ω–æ–µ')
        # imshow(Cw)
        #
        # fig.add_subplot(1, 3, 2)
        # plt.title(f'–û–∫–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–º {m}')
        # imshow(Cw_, cmap='gray')
        # show()

    return p


# –ò—Å–∫–∞–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä-–º–∞—Ç–µ JPEG
# –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø–æ—Ç–µ—Ä—å.
# –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ JPEG-—Ñ–∞–π–ª–∞ ùëÑùêπ, –∏–∑–º–µ–Ω—è–µ-–º—ã–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 100.
def jpeg(IMAGE_FILE):
    img = Image.open(IMAGE_FILE)
    p = []
    for qf in range(30, 90, 10):
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        img.save(buffer, "JPEG", quality=qf)

        # –ó–∞–ø–∏—à–µ–º, —á—Ç–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        with open("./1.jpg", "wb") as handle:
            handle.write(buffer.getbuffer())

        Cw_ = io.imread("1.jpg", as_gray=False)
        p.append(calculation_p(Cw_))
    return p


def calculation_p(Cw_2, beta_mse=False):
    C = io.imread("baboon.tif", as_gray=False)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¶–í–ó-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É  (C * 3/4) * 1/2 = 98304
    size = int((C.shape[0] * C.shape[0] * 3 / 4) * 1 / 2)
    np.random.seed(1)
    W = np.random.normal(0, 1, size)
    a = 2

    # f - –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–æ—Å–∏—Ç–µ–ª—è
    f = []
    result = np.zeros(C.shape)
    for i in range(3):
        channel = get_channel(C, i)

        # –î–ü–§ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        C_fft = fft.fft(channel)
        f.append(C_fft)

        # –ê–¥–∏—Ç–∏–≤–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ Cw = C + a*W. fw - –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        Cw, map = inserting2(C_fft, W, a)

        if beta_mse:
            # –£–º–µ–Ω—å—à–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è  beta_mse
            beta = roll(channel, 9)
            C_ = np.abs(fft.ifft(Cw) * beta + channel * (1 - beta))
        else:
            C_ = np.abs(fft.ifft(Cw))

        result[:, :, i] = C_.astype(int)

    # –¢–∏–ø –º–∞—Å—Å–∏–≤–∞ –º–µ–Ω—è–µ–º –Ω–∞ int
    result = np.int_(result)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    # io.imsave("baboon_with_watermark.png", result)

    # Cw = io.imread("baboon_with_watermark_distorted.png", as_gray=False)
    Cw = Cw_2
    ps = []
    for i in range(3):
        channel = get_channel(Cw, i)

        # –î–ü–§ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. fw_ - –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –Ω–æ—Å–∏—Ç–µ–ª—è
        fw_ = fft.fft(channel)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¶–í–ó. omega_- –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        omega_ = extraction2(fw_, f[i], a)

        # omega - –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        omega = fft.fft(W)

        # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–í–ó. p - —Ñ—É–Ω–∫—Ü–∏—è –±–ª–∏–∑–æ—Å—Ç–∏
        p = np.sum(omega * omega_) / ((np.sum(np.power(omega, 2)) ** 0.5) * (np.sum(np.power(omega_, 2)) ** 0.5))
        ps.append(np.abs(p))

    return ps


def graphic(fig, num, name, arr, red, green, blue):
    fig.add_subplot(2, 4, num+1)
    plt.title(f'{name}')
    plt.plot(arr, red, 'o-r', alpha=0.7, label="first", lw=5, mec='b', mew=2, ms=10)
    plt.plot(arr, green, 'o-g', alpha=0.7, label="first", lw=5, mec='b', mew=2, ms=10)
    plt.plot(arr, blue, 'o-b', alpha=0.7, label="first", lw=5, mec='b', mew=2, ms=10)
    plt.legend()
    plt.grid(True)


if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = io.imread("baboon_with_watermark.png", as_gray=False)

    p_cut = cut(image, io.imread("baboon.tif", as_gray=False))
    print(f'Cut:{p_cut}')
    p_rotation = rotation(image)
    print(f'Rotation:{p_rotation}')
    p_sharpen = sharpen(image)
    print(f'Sharpen:{p_sharpen}')
    p_jpeg = jpeg("baboon_with_watermark.png")
    print(f'Jpeg:{p_jpeg}')
    mesurments = [p_cut, p_rotation, p_sharpen, p_jpeg]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    fig = plt.figure(figsize=(16, 8))
    names = ['cut', 'rotation', 'sharpen', 'jpeg']
    for j in range(4):
        red = []
        green = []
        blue = []
        current = mesurments[j]
        arr = [i for i in range(len(current))]
        for i in range(len(current)):
            red.append(current[i][0])
            green.append(current[i][1])
            blue.append(current[i][2])
        graphic(fig, j, names[j], arr, red, green, blue)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è  beta:MSE
    image = io.imread("baboon_with_watermark_betamse.png", as_gray=False)

    p_cut = cut(image, io.imread("baboon.tif", as_gray=False))
    print(p_cut)
    p_rotation = rotation(image)
    print(p_rotation)
    p_sharpen = sharpen(image)
    print(p_sharpen)
    p_jpeg = jpeg("baboon_with_watermark_betamse.png")
    print(p_jpeg)
    mesurments = [p_cut, p_rotation, p_sharpen, p_jpeg]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º

    names = ['betaMSE\ncut', 'betaMSE\nrotation', 'betaMSE\nsharpen', 'betaMSE\njpeg']
    for j in range(4):
        red = []
        green = []
        blue = []
        current = mesurments[j]
        arr = [i for i in range(len(current))]
        for i in range(len(current)):
            red.append(current[i][0])
            green.append(current[i][1])
            blue.append(current[i][2])
        graphic(fig, j+4, names[j], arr, red, green, blue)
    show()
