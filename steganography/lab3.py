import numpy as np
import matplotlib.pyplot as plt
from skimage import io
from skimage.io import imshow, show, imread, imsave
from skimage.metrics import peak_signal_noise_ratio     # PSNR
from scipy import fft, ifft
from scipy.signal import convolve2d

import cv2


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏ —Å —Ç–æ–ª—å–∫–æ —Å –∑–µ–ª–µ–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–µ–ª–µ–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
def get_channel(img, channel_num):  # 0-red, 1-green, 2-blue
    channel = img[:, :, channel_num]
    return channel


# –î–∞–Ω–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤—ã—Ä–µ–∑–∞–Ω–∏–∏ –∏–∑ –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# —Ä–∞–∑–º–µ—Ä–∞–º–∏ ùëÅ1 √ó ùëÅ2 –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å —Ç–µ–º–∏ –∂–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏,
# –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –≤ —Ç–æ—á–∫–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (0,0) –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –¥–æ–ª—é ùúó –æ—Ç –µ–≥–æ
# –ø–ª–æ—â–∞–¥–∏. –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
def cut(Cw, C=0):
    Cw_ = []
    v_min = 0.2
    v_max = 0.9
    w = Cw.shape[0]
    h = Cw.shape[1]
    s = w*h

    for v in np.arange(v_min, v_max, 0.1):
        print(v)
        print(f'–ü–ª–æ—â–∞–¥—å: {s*v}')
        a = int((s*v)**(1/2))
        print(a)

        Cw_ = np.zeros((h, w))
        for i in range(0, h):
            for j in range(0, w):
                if i < (a) and j < (a):
                    Cw_[i][j] = Cw[i][j]
                else:
                    Cw_[i][j] = C
    return Cw_


# –í –¥–∞–Ω–Ω–æ–º –∏—Å–∫–∞–∂–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞
# –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —É–≥–æ–ª ùúë —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,
# —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä.
def rotation(Cw):
    (h, w) = Cw.shape[:2]
    center = (int(w / 2), int(h / 2))

    for fi in np.arange(1, 98.9, 8.9):
        rotation_matrix = cv2.getRotationMatrix2D(center, int(-fi), 1)
        Cw_ = cv2.warpAffine(Cw, rotation_matrix, (w, h))

    return Cw_


# –ó–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
# ùê∂ùëäÃÉ(ùëõ1,ùëõ2)=ùê∂ùëä(ùëõ1,ùëõ2)+ùê¥(ùê∂ùëä(ùëõ1,ùëõ2)‚àíùê∂ùë†ùëöùëúùëúùë°‚Ñéùëä(ùëõ1,ùëõ2)),
# –≥–¥–µ ùê∂ùë†ùëöùëúùëúùë°‚Ñéùëä ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ùê∂ùëä –≤ –æ–∫–Ω–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ ùëÄ√óùëÄ (–∏—Å–∫–∞–∂–µ-–Ω–∏–µ 5 —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞),
# –∞ ùê¥>0 ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–Ω–æ–≥–æ –∏–∑–æ–±-—Ä–∞–∂–µ–Ω–∏—è.
def sharpen(Cw):
    Cw_smooth = []



    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    fig = plt.figure(figsize=(9, 3))
    fig.add_subplot(1, 3, 1)
    plt.title(f'–ò—Å—Ö–æ–¥–Ω–æ–µ:{h}x{w}')
    imshow(Cw)

    fig.add_subplot(1, 3, 2)
    plt.title(f'–ü–æ–≤–µ—Ä–Ω—É—Ç–æ–µ –Ω–∞ {int(-fi)}')
    imshow(Cw_)
    show()

    return Cw_


# –ò—Å–∫–∞–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä-–º–∞—Ç–µ JPEG
# –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø–æ—Ç–µ—Ä—å.
# –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ JPEG-—Ñ–∞–π–ª–∞ ùëÑùêπ, –∏–∑–º–µ–Ω—è–µ-–º—ã–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 100.
def jpeg():
    return


if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = io.imread("baboon.tif", as_gray=True)
    rotation(image)

